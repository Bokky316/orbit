import React, { useState } from 'react';import PropTypes from 'prop-types';import { styled } from '@mui/material/styles';import {  Paper,  Table,  TableBody,  TableCell,  TableContainer,  TableHead,  TableRow,  TextField,  Button,  FormControl,  InputLabel,  Select,  MenuItem,  Box,  Typography,  Grid} from '@mui/material';// 스티키 헤더를 위한 스타일링된 TableContainerconst StyledTableContainer = styled(TableContainer)(({ theme }) => ({  maxHeight: 440,  '& .MuiTableHead-root': {    position: 'sticky',    top: 0,    backgroundColor: theme.palette.background.paper,    zIndex: 1,  }}));// 일반 함수 선언을 사용한 컴포넌트function BiddingListPage() {  // 상태 관리  const [searchTerm, setSearchTerm] = useState('');  const [status, setStatus] = useState('');  const [dateRange, setDateRange] = useState({    start: '',    end: ''  });  // 임시 데이터 (실제로는 API에서 가져올 예정)  const biddingList = [    {      id: 1,      bidNumber: 'BID-2023-001',      title: '사무용 기자재 구매 입찰',      startDate: '2023-07-01',      endDate: '2023-07-15',      itemName: '컴퓨터',      totalAmount: 10000000,      status: '대기중'    },    {      id: 2,      bidNumber: 'BID-2023-002',      title: '네트워크 장비 구매',      startDate: '2023-08-01',      endDate: '2023-08-20',      itemName: '네트워크 스위치',      totalAmount: 15000000,      status: '진행중'    },    {      id: 3,      bidNumber: 'BID-2023-003',      title: '서버 구매',      startDate: '2023-09-01',      endDate: '2023-09-30',      itemName: '서버',      totalAmount: 50000000,      status: '대기중'    }  ];  // 필터링 로직  const filteredList = biddingList.filter(item => {    const matchSearchTerm = item.title.includes(searchTerm) ||                            item.bidNumber.includes(searchTerm);    const matchStatus = !status || item.status === status;    return matchSearchTerm && matchStatus;  });  // 아이템 편집을 위한 핸들러  function handleEditItem(id) {    // 편집 페이지로 이동하거나 모달 열기    console.log(`Edit item with ID: ${id}`);    // 여기서 라우팅 처리 또는 상태 관리를 통해 BiddingFormPage로 데이터 전달  }  // 검색 핸들러  function handleSearch() {    console.log('검색 실행:', { searchTerm, status, dateRange });    // 실제로는 여기서 API 호출 등의 로직 수행  }  // 상태 변경 핸들러  function handleStatusChange(event) {    setStatus(event.target.value);  }  // 날짜 변경 핸들러  function handleDateChange(field, event) {    const { value } = event.target;    setDateRange(prev => ({      ...prev,      [field]: value    }));  }  return (    <Box sx={{ p: 4 }}>      <Typography variant="h4" sx={{ mb: 4 }}>입찰 공고 리스트</Typography>      {/* 필터 영역 */}      <Grid container spacing={2} sx={{ mb: 4 }}>        <Grid item xs={12} md={3}>          <TextField            fullWidth            label="검색어 입력"            variant="outlined"            value={searchTerm}            onChange={(e) => setSearchTerm(e.target.value)}          />        </Grid>        <Grid item xs={12} md={2}>          <FormControl fullWidth>            <InputLabel id="status-select-label">상태 선택</InputLabel>            <Select              labelId="status-select-label"              value={status}              label="상태 선택"              onChange={handleStatusChange}            >              <MenuItem value="">전체</MenuItem>              <MenuItem value="대기중">대기중</MenuItem>              <MenuItem value="진행중">진행중</MenuItem>              <MenuItem value="마감">마감</MenuItem>              <MenuItem value="취소">취소</MenuItem>            </Select>          </FormControl>        </Grid>        <Grid item xs={12} md={2}>          <TextField            fullWidth            label="시작일"            type="date"            value={dateRange.start}            onChange={(e) => handleDateChange('start', e)}            InputLabelProps={{              shrink: true,            }}          />        </Grid>        <Grid item xs={12} md={2}>          <TextField            fullWidth            label="종료일"            type="date"            value={dateRange.end}            onChange={(e) => handleDateChange('end', e)}            InputLabelProps={{              shrink: true,            }}          />        </Grid>        <Grid item xs={12} md={3} sx={{ display: 'flex', alignItems: 'center' }}>          <Button            variant="contained"            color="primary"            onClick={handleSearch}            sx={{ height: '56px' }}          >            검색          </Button>        </Grid>      </Grid>      {/* 스티키 헤더를 사용한 테이블 영역 */}      <Paper>        <StyledTableContainer>          <Table stickyHeader aria-label="입찰 공고 목록 테이블">            <TableHead>              <TableRow>                <TableCell>공고번호</TableCell>                <TableCell>공고명</TableCell>                <TableCell>공고기간</TableCell>                <TableCell>품목</TableCell>                <TableCell align="right">금액</TableCell>                <TableCell>공고상태</TableCell>                <TableCell>마감</TableCell>                <TableCell>작업</TableCell>              </TableRow>            </TableHead>            <TableBody>              {filteredList.map(item => (                <TableRow key={item.id} hover>                  <TableCell>{item.bidNumber}</TableCell>                  <TableCell>{item.title}</TableCell>                  <TableCell>{`${item.startDate} ~ ${item.endDate}`}</TableCell>                  <TableCell>{item.itemName}</TableCell>                  <TableCell align="right">{item.totalAmount.toLocaleString()}원</TableCell>                  <TableCell>{item.status}</TableCell>                  <TableCell>{item.endDate}</TableCell>                  <TableCell>                    <Button                      size="small"                      variant="outlined"                      onClick={() => handleEditItem(item.id)}                    >                      편집                    </Button>                  </TableCell>                </TableRow>              ))}            </TableBody>          </Table>        </StyledTableContainer>      </Paper>      {/* 신규 등록 버튼 */}      <Box sx={{ mt: 4 }}>        <Button variant="contained" color="primary">          새 입찰 등록        </Button>      </Box>    </Box>  );}export default BiddingListPage;