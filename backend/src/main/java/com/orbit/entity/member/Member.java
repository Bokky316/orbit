package com.orbit.entity.member;import com.orbit.dto.member.MemberFormDto;import com.orbit.entity.Department;import com.orbit.entity.Position;import jakarta.persistence.*;import lombok.*;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.crypto.password.PasswordEncoder;import java.time.LocalDateTime;import java.util.Collection;import java.util.List;@Entity@Table(name = "members")@Getter@Setter@NoArgsConstructor@AllArgsConstructor@Builderpublic class Member implements UserDetails {    @Id    @GeneratedValue(strategy = GenerationType.IDENTITY)    private Long id;    @Column(name = "username", length = 50, nullable = false, unique = true)    private String username;    @Column(name = "name", length = 50, nullable = false)    private String name;    @Column(name = "password", length = 255, nullable = false)    private String password;    @Column(name = "email", length = 100, nullable = false, unique = true)    private String email;    @Column(name = "company_name", length = 100, nullable = false)    private String companyName;    @Column(name = "contact_number", length = 20)    private String contactNumber;    @Column(name = "postal_code", length = 10)    private String postalCode;    @Column(name = "road_address")    private String roadAddress;    @Column(name = "detail_address")    private String detailAddress;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "dept_id")    private Department department;    @ManyToOne(fetch = FetchType.LAZY)    @JoinColumn(name = "position_id")    private Position position;    @Enumerated(EnumType.STRING)    @Column(nullable = false)    private Role role;    @Column(name = "last_login_at")    private LocalDateTime lastLoginAt;    @Column(name = "created_at", updatable = false)    private LocalDateTime createdAt;    @Column(name = "updated_at")    private LocalDateTime updatedAt;    @Column(name = "enabled")    private boolean enabled;    @Column(name = "deactivated_at")    private LocalDateTime deactivatedAt;    @PrePersist    protected void onCreate() {        createdAt = LocalDateTime.now();        updatedAt = LocalDateTime.now();        this.enabled = true;    }    @PreUpdate    protected void onUpdate() {        updatedAt = LocalDateTime.now();    }    public enum Role {        BUYER, SUPPLIER, ADMIN    }    public static Member createMember(MemberFormDto memberFormDto, PasswordEncoder passwordEncoder) {        return Member.builder()                .username(memberFormDto.getUsername())                .name(memberFormDto.getName())                .password(passwordEncoder.encode(memberFormDto.getPassword()))                .email(memberFormDto.getEmail())                .companyName(memberFormDto.getCompanyName())                .contactNumber(memberFormDto.getContactNumber())                .postalCode(memberFormDto.getPostalCode())                .roadAddress(memberFormDto.getRoadAddress())                .detailAddress(memberFormDto.getDetailAddress())                .role(Role.BUYER)                .enabled(true)                .build();    }    public void addAuthority(String authority) {        if (this.role == null) {            this.role = Role.valueOf(authority);        }    }    @Override    public Collection<? extends GrantedAuthority> getAuthorities() {        return List.of(new SimpleGrantedAuthority("ROLE_" + role.name()));    }    @Override    public String getUsername() {        return this.username;    }    @Override    public boolean isAccountNonExpired() {        return true;    }    @Override    public boolean isAccountNonLocked() {        return true;    }    @Override    public boolean isCredentialsNonExpired() {        return true;    }    @Override    public boolean isEnabled() {        return this.enabled;    }    public void deactivateMember() {        this.enabled = false;        this.deactivatedAt = LocalDateTime.now();    }    public void activateMember() {        this.enabled = true;        this.deactivatedAt = null;    }}